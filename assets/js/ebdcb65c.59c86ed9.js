"use strict";(self.webpackChunkyeet_docs=self.webpackChunkyeet_docs||[]).push([[9043],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return a?r.createElement(f,i(i({ref:t},u),{},{components:a})):r.createElement(f,i({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5409:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=a(3117),n=(a(7294),a(3905));const o={title:"OData",description:"There you find an overview of the OData protocol.",sidebar_position:4},i="OData",l={unversionedId:"advanced/o-data/o-data",id:"advanced/o-data/o-data",title:"OData",description:"There you find an overview of the OData protocol.",source:"@site/docs/advanced/o-data/o-data.mdx",sourceDirName:"advanced/o-data",slug:"/advanced/o-data/",permalink:"/advanced/o-data/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/o-data/o-data.mdx",tags:[],version:"current",lastUpdatedBy:"Wegener",sidebarPosition:4,frontMatter:{title:"OData",description:"There you find an overview of the OData protocol.",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Element",permalink:"/advanced/multi-properties/element-property/"}},s={},p=[{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"String Functions",id:"string-functions",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Date Functions",id:"date-functions",level:2}],u={toc:p};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"odata"},"OData"),(0,n.kt)("p",null,"In the world of OData (Open Data Protocol), efficiently querying and interacting with data services is a key capability. This guide will introduce you to the various OData column (property) types and the filter operators that can be applied to them for effective data querying."),(0,n.kt)("h1",{id:"odata-column-types"},"OData Column Types"),(0,n.kt)("p",null,"OData services support a range of data types for properties, each designed to accommodate specific kinds of data:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edm.String"),(0,n.kt)("br",{parentName:"li"}),"Represents text data. It can contain letters, numbers, and other characters."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edm.Int16, Edm.Int32, Edm.Int64"),(0,n.kt)("br",{parentName:"li"}),"Integer data types for representing whole numbers of varying sizes."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edm.Decimal"),(0,n.kt)("br",{parentName:"li"}),"Used for decimal numbers, providing a high level of precision."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edm.Double"),(0,n.kt)("br",{parentName:"li"}),"Represents floating-point numbers."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edm.Boolean"),(0,n.kt)("br",{parentName:"li"}),"Represents boolean values (true or false)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edm.Date"),(0,n.kt)("br",{parentName:"li"}),"Used for dates without time information."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edm.TimeOfDay"),(0,n.kt)("br",{parentName:"li"}),"Represents time without date information."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edm.DateTimeOffset"),(0,n.kt)("br",{parentName:"li"}),"Represents date and time with timezone information.")),(0,n.kt)("h1",{id:"filter-operators"},"Filter Operators"),(0,n.kt)("p",null,"OData's powerful query options include a variety of filter operators that can be applied to entity properties in a query. These operators allow for complex filtering based on the property values:"),(0,n.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"eq (equals)"),(0,n.kt)("br",{parentName:"li"}),"Checks if the value of a property is equal to a specified value."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ne (not equals)"),(0,n.kt)("br",{parentName:"li"}),"Checks if the value of a property is not equal to a specified value."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"gt (greater than), ge (greater than or equal to)"),(0,n.kt)("br",{parentName:"li"}),"These operators are used for comparing numerical values, including dates and times."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"lt (less than), le (less than or equal to)"),(0,n.kt)("br",{parentName:"li"}),"Similar to gt and ge, these operators compare numerical values.")),(0,n.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"and"),(0,n.kt)("br",{parentName:"li"}),"Combines two or more conditions that must all be true for the filter to pass."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"or"),(0,n.kt)("br",{parentName:"li"}),"Combines two or more conditions where at least one must be true for the filter to pass."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"not"),(0,n.kt)("br",{parentName:"li"}),"Negates the condition that follows.")),(0,n.kt)("h2",{id:"string-functions"},"String Functions"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"startswith, endswith"),(0,n.kt)("br",{parentName:"li"}),"Check if a string property starts or ends with a specified substring."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"contains"),(0,n.kt)("br",{parentName:"li"}),"Checks if a string property contains a specified substring."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"substringof (deprecated in OData version 4.0)"),(0,n.kt)("br",{parentName:"li"}),"Similar to contains, checks if a property string contains a specific substring.")),(0,n.kt)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"add, sub, mul, div, mod"),(0,n.kt)("br",{parentName:"li"}),"Perform basic arithmetic operations on numerical properties.")),(0,n.kt)("h2",{id:"date-functions"},"Date Functions"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"year, month, day"),(0,n.kt)("br",{parentName:"li"}),"Extracts the year, month, or day component from a Date or DateTimeOffset property.")),(0,n.kt)("h1",{id:"usage-in-queries"},"Usage in Queries"),(0,n.kt)("p",null,"This will be mostly useful when using custom queries in javascript within UILogic. Filter operators can be used in the $filter query option to specify conditions that entities must meet to be included in the response. Here's a simple example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-odata"},"http://example.com/odata/People?$filter=FirstName eq 'John' and Age gt 30\n")),(0,n.kt)("p",null,'This query retrieves people named "John" who are older than 30.'),(0,n.kt)("p",null,"It's important to note that the availability of certain filter functions and operators may vary depending on the OData service implementation. Always refer to the specific documentation for the OData service you are querying."),(0,n.kt)("p",null,"By leveraging these column types and filter operators, users can construct powerful queries to efficiently access and manipulate data in an OData service."))}c.isMDXComponent=!0}}]);